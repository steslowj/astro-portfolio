---
import { type CollectionEntry, getCollection } from 'astro:content';

import BaseLayout from '../../layouts/BaseLayout.astro';

import Icon from '../../components/Icon.astro';

interface Props {
	entry: CollectionEntry<'work'>;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
	const work = await getCollection('work');
	return work.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---
<BaseLayout title={entry.data.title} description={entry.data.description}>
	<section class="stack">
		<div class="stack">
			<header>
				<div class="wrapper stack">
					<a class="back-link" href="/portfolio/"><Icon icon="arrow-left" /> portfolio</a>
					<h2 class="heading">{entry.data.title} </h2>
          <div class="details">
            <p class="description">{entry.data.description}</p>
            <p class="published">Published: {entry.data.publishDate.toString().slice(4,16)}</p>
            <p class="live-link"> 
              {entry.data.liveLink && <span>Hosted live at: </span> 
                <a href={entry.data.liveLink} target="_blank">
                  {entry.data.liveLink}</a> || ' '}</p>
            <ul class="tags">
              Tagged:
              {entry.data.tags.map((t) => <li>{t}</li>)}
            </ul>
          </div>
				</div>
			</header>
			<main class="wrapper">
        <div class="stack content">
          {entry.data.img && <img src={entry.data.img} alt={entry.data.img_alt || ''} />}
					<div class="content">
						<Content />
					</div>
				</div>
			</main>
		</div>
	</section>
</BaseLayout>


<style>
.wrapper {
  width: 100%;
  max-width: 83rem;
  margin-inline: auto;
  padding-inline: 1.5rem;
}

.stack {
  display: flex;
  flex-direction: column;
}

.back-link {
  display: none;
}

.details {
  padding: 0.5rem;
  gap: 1.5rem;
  align-items: center;
}

.description {
  font-size: var(--text-base);
  max-width: 98%;
  margin-bottom: 1rem;
}

.published, .live-link {
  margin: 0.5rem 0;
  font-size: calc(var(--text-sm)*1.1);
  text-overflow: ellipsis;
}

.tags {
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  margin: 1rem 0;
  gap: 0.5rem;
  list-style: none;
  align-items: baseline;
  font-size: calc(var(--text-sm)*1.1);
}

.tags li {
  width: auto;
  background-color: var(--theme-bg);
  border: var(--theme-accent1) 1px solid;
  text-transform: none;
  border-radius: 6px;
  padding: 2px 8px;
  margin: 4px 1px;
}

.content {
  max-width: 65ch;
  margin-inline: auto;
}

.content > :global(* + *) {
  margin-top: 1rem;
}

.content :global(h1),
.content :global(h2),
.content :global(h3),
.content :global(h4),
.content :global(h5) {
  margin: 1.5rem 0;
}

.content :global(img) {
  /*border-radius: 1.5rem;*/
  border: 2px solid var(--theme-text);
}

.content :global(blockquote) {
  font-size: var(--text-lg);
  font-weight: 600;
  line-height: 1.1;
  padding-inline-start: 1.5rem;
  border-inline-start: 0.25rem solid var(--theme-accent1);
  color: var(--theme-accent1);
}

.back-link,
.content :global(a) {
  text-decoration: 1px solid underline transparent;
  text-underline-offset: 0.25em;
  transition: text-decoration-color var(--theme-transition);
}

.back-link:hover,
.back-link:focus,
.content :global(a:hover),
.content :global(a:focus) {
  text-decoration-color: currentColor;
}

@media (min-width: 50em) {
  .back-link {
    display: block;
    align-self: flex-start;
  }

  .details {
    flex-direction: row;
    gap: 2.5rem;
  }

  .content :global(blockquote) {
    font-size: var(--text-2xl);
  }
}
</style>
